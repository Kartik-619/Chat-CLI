{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anshi\\\\OneDrive\\\\Desktop\\\\abc\\\\chat\\\\frontend-cli\\\\src\\\\components\\\\ChatSection.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./ChatSection.css\";\nimport { socket } from \"../services/socket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatSection({\n  user,\n  goBack,\n  setProfileUser\n}) {\n  _s();\n  // stores messages with the username in an array\n  const [allMessages, setAllMessages] = useState({});\n  const [input, setInput] = useState(\"\"); //what are we typing in the present instance\n  const inputRef = useRef(null); //brings focus on the field of input automatically\n  const messagesEndRef = useRef(null);\n  const currentMessages = allMessages[user.username] || [];\n\n  // Auto-focus input whenever a new user chat opens\n  useEffect(() => {\n    var _inputRef$current;\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n  }, [user]);\n\n  //listen for incoming messages\n  useEffect(() => {\n    const handleMessage = message => {\n      setAllMessages(prev => ({\n        ...prev,\n        //here we update the allMessage state and add the new messages to the group w.r.t the sender name\n        [message.sender]: [\n        //access to the previous messages of the sender is allowed in here\n        ...(prev[message.sender] || []),\n        //we are setting a default format\n        {\n          sender: message.sender,\n          text: message.text\n        }]\n      }));\n    };\n\n    //links to the event chat message and calls handleMessage\n    socket.on(\"chat message\", handleMessage);\n\n    //cleans the listener when the function re-renders\n    return () => socket.off(\"chat message\", handleMessage);\n  }, []);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    //allows the autoscroll to the last message\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [currentMessages]);\n\n  //shows the profile of the person you texting with\n  const handleUsernameClick = () => {\n    setProfileUser(user);\n  };\n  const handleSend = () => {\n    if (!input.trim()) return; // prevent sending the empty lines\n\n    // update your message locally\n    setAllMessages(prev => ({\n      ...prev,\n      [user.username]: [...(prev[user.username] || []), {\n        sender: \"You\",\n        text: input\n      }]\n    }));\n\n    // Send to backend\n    socket.emit(\"chat message\", {\n      sender: user.username,\n      //  use actual username, not \"You\"\n      to: user.username,\n      // you might later replace this with the selected recipient\n      text: input\n    });\n    setInput(\"\"); //clear input field\n  };\n  const handleKeyPress = e => {\n    if (e.key === \"Enter\") handleSend();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-section-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-btn\",\n        onClick: goBack,\n        children: \"\\u2190 Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Chat with\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"clickable-username\",\n          onClick: handleUsernameClick,\n          style: {\n            cursor: \"pointer\",\n            textDecoration: \"underline\"\n          },\n          children: user.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [currentMessages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.sender === \"You\" ? \"sent\" : \"received\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.sender, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), msg.text]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputRef,\n        type: \"text\",\n        placeholder: \"Type a message...\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatSection, \"f1uWN+75LgHovRXtki/k5EzKMu0=\");\n_c = ChatSection;\nvar _c;\n$RefreshReg$(_c, \"ChatSection\");","map":{"version":3,"names":["React","useState","useEffect","useRef","socket","jsxDEV","_jsxDEV","ChatSection","user","goBack","setProfileUser","_s","allMessages","setAllMessages","input","setInput","inputRef","messagesEndRef","currentMessages","username","_inputRef$current","current","focus","handleMessage","message","prev","sender","text","on","off","_messagesEndRef$curre","scrollIntoView","behavior","handleUsernameClick","handleSend","trim","emit","to","handleKeyPress","e","key","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","cursor","textDecoration","map","msg","idx","ref","type","placeholder","value","onChange","target","onKeyPress","_c","$RefreshReg$"],"sources":["C:/Users/anshi/OneDrive/Desktop/abc/chat/frontend-cli/src/components/ChatSection.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./ChatSection.css\";\r\nimport { socket } from \"../services/socket\";\r\n\r\nexport default function ChatSection({ user, goBack, setProfileUser }) {\r\n  // stores messages with the username in an array\r\n  const [allMessages, setAllMessages] = useState({});\r\n  const [input, setInput] = useState(\"\"); //what are we typing in the present instance\r\n  const inputRef = useRef(null); //brings focus on the field of input automatically\r\n  const messagesEndRef = useRef(null);\r\n  const currentMessages = allMessages[user.username] || [];\r\n\r\n  // Auto-focus input whenever a new user chat opens\r\n  useEffect(() => {\r\n    inputRef.current?.focus();\r\n  }, [user]);\r\n\r\n  //listen for incoming messages\r\n  useEffect(() => {\r\n    const handleMessage = (message) => {\r\n      setAllMessages((prev) => ({\r\n        ...prev,\r\n        //here we update the allMessage state and add the new messages to the group w.r.t the sender name\r\n        [message.sender]: [\r\n          //access to the previous messages of the sender is allowed in here\r\n          ...(prev[message.sender] || []),\r\n          //we are setting a default format\r\n          { sender: message.sender, text: message.text },\r\n        ],\r\n      }));\r\n    };\r\n\r\n    //links to the event chat message and calls handleMessage\r\n    socket.on(\"chat message\", handleMessage);\r\n\r\n    //cleans the listener when the function re-renders\r\n    return () => socket.off(\"chat message\", handleMessage);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    //allows the autoscroll to the last message\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [currentMessages]);\r\n\r\n  //shows the profile of the person you texting with\r\n  const handleUsernameClick = () => {\r\n    setProfileUser(user);\r\n  };\r\n\r\n  const handleSend = () => {\r\n    if (!input.trim()) return; // prevent sending the empty lines\r\n\r\n    // update your message locally\r\n    setAllMessages((prev) => ({\r\n      ...prev,\r\n      [user.username]: [\r\n        ...(prev[user.username] || []),\r\n        { sender: \"You\", text: input },\r\n      ],\r\n    }));\r\n\r\n    // Send to backend\r\n    socket.emit(\"chat message\", {\r\n      sender: user.username, //  use actual username, not \"You\"\r\n      to: user.username,     // you might later replace this with the selected recipient\r\n      text: input,\r\n    });\r\n\r\n    setInput(\"\"); //clear input field\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\") handleSend();\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-section-container\">\r\n      <div className=\"chat-header\">\r\n        <button className=\"back-btn\" onClick={goBack}>← Back</button>\r\n        <h3>\r\n          Chat with{\" \"}\r\n          <span\r\n            className=\"clickable-username\"\r\n            onClick={handleUsernameClick}\r\n            style={{ cursor: \"pointer\", textDecoration: \"underline\" }}\r\n          >\r\n            {user.username}\r\n          </span>\r\n        </h3>\r\n      </div>\r\n      <div className=\"chat-messages\">\r\n        {currentMessages.map((msg, idx) => (\r\n          <div\r\n            key={idx}\r\n            className={`chat-message ${\r\n              msg.sender === \"You\" ? \"sent\" : \"received\"\r\n            }`}\r\n          >\r\n            <strong>{msg.sender}: </strong>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      <div className=\"chat-input\">\r\n        <input\r\n          ref={inputRef}\r\n          type=\"text\"\r\n          placeholder=\"Type a message...\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyPress={handleKeyPress}\r\n        />\r\n        <button onClick={handleSend}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}